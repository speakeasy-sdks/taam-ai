<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace taamai\taamai;

class Templates 
{
	
	public const ALL_TEMPLATES_SERVERS = [
		'https://taam.ai/api',
	];
	
	public const FAV_TEMPLATES_SERVERS = [
		'https://taam.ai/api',
	];
	
	public const GENERATE_TEMPLATE_SERVERS = [
		'https://taam.ai/api',
	];
	
	public const PROCESS_TEMPLATE_SERVERS = [
		'https://taam.ai/api',
	];
	
	public const TEMPLATE_DETAIL_SERVERS = [
		'https://taam.ai/api',
	];
	
	public const TEMPLATEGROUPS_SERVERS = [
		'https://taam.ai/api',
	];

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * All Templates
     * 
     * @param \taamai\taamai\Models\Operations\AllTemplatesRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\AllTemplatesResponse
     */
	public function allTemplates(
        ?\taamai\taamai\Models\Operations\AllTemplatesRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\AllTemplatesResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Templates::ALL_TEMPLATES_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/templates/all');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\AllTemplatesRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \taamai\taamai\Models\Operations\AllTemplatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->allTemplates = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\AllTemplatesAllTemplates', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fav Templates
     * 
     * @param \taamai\taamai\Models\Operations\FavTemplatesRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\FavTemplatesResponse
     */
	public function favTemplates(
        ?\taamai\taamai\Models\Operations\FavTemplatesRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\FavTemplatesResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Templates::FAV_TEMPLATES_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/templates/favorite');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\FavTemplatesRequest::class, $request, null));
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \taamai\taamai\Models\Operations\FavTemplatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Generate Template
     * 
     * @param \taamai\taamai\Models\Operations\GenerateTemplateRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\GenerateTemplateResponse
     */
	public function generateTemplate(
        ?\taamai\taamai\Models\Operations\GenerateTemplateRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\GenerateTemplateResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Templates::GENERATE_TEMPLATE_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/template/generate');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\GenerateTemplateRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \taamai\taamai\Models\Operations\GenerateTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->generateTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\GenerateTemplateGenerateTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Process Template
     * 
     * @param \taamai\taamai\Models\Operations\ProcessTemplateRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\ProcessTemplateResponse
     */
	public function processTemplate(
        ?\taamai\taamai\Models\Operations\ProcessTemplateRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\ProcessTemplateResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Templates::PROCESS_TEMPLATE_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/templates/process');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\ProcessTemplateRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \taamai\taamai\Models\Operations\ProcessTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->processTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\ProcessTemplateProcessTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Template Detail
     * 
     * @param \taamai\taamai\Models\Operations\TemplateDetailRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\TemplateDetailResponse
     */
	public function templateDetail(
        ?\taamai\taamai\Models\Operations\TemplateDetailRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\TemplateDetailResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Templates::TEMPLATE_DETAIL_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/templates/detail');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\TemplateDetailRequest::class, $request, null));
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \taamai\taamai\Models\Operations\TemplateDetailResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Template groups
     * 
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\TemplategroupsResponse
     */
	public function templategroups(
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\TemplategroupsResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Templates::TEMPLATEGROUPS_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/templates/groups');
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \taamai\taamai\Models\Operations\TemplategroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}