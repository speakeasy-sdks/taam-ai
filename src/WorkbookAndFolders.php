<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace taamai\taamai;

class WorkbookAndFolders 
{
	
	public const ADDANDREMOVEFROMFAV_DOCUMENT_SERVERS = [
		'http://127.0.0.1:8000/api',
	];
	
	public const CONTENTSINWORKBOOK_SERVERS = [
		'https://taam.ai/api',
	];
	
	public const CREATE_FOLDER_SERVERS = [
		'http://127.0.0.1:8000/api',
	];
	
	public const CREATE_WORKBOOK_SERVERS = [
		'http://127.0.0.1:8000/api',
	];
	
	public const DELETE_WORKSPACE_SERVERS = [
		'https://taam.ai/api',
	];
	
	public const DELETEALLKINDOFDOCUMENTS_SERVERS = [
		'http://127.0.0.1:8000/api',
	];
	
	public const JOINWORKBOOK_SERVERS = [
		'http://127.0.0.1:8000/api',
	];
	
	public const JOINWORKBOOKREQUESTR_SERVERS = [
		'http://127.0.0.1:8000/api',
	];
	
	public const PERMANENT_DELETEFOLDER_SERVERS = [
		'https://taam.ai/api',
	];
	
	public const REJECT_WORKBOOK_SERVERS = [
		'http://127.0.0.1:8000/api',
	];
	
	public const RESTORE_DOCUEMNTOFALLTYPE_CONTENT_VOICEOVER_IMAGES_TRANSCRIPT_CODE_SERVERS = [
		'http://127.0.0.1:8000/api',
	];
	
	public const RESTORE_WORKSPACE_SERVERS = [
		'https://taam.ai/api',
	];
	
	public const SETDEFUALTWORKSPACE_SERVERS = [
		'https://taam.ai/api',
	];
	
	public const TRASHEDFOLDERS_SERVERS = [
		'http://127.0.0.1:8000/api',
	];
	
	public const TRASHEDWORKSPACES_SERVERS = [
		'http://127.0.0.1:8000/api',
	];
	
	public const WORKBOOK_DETAIL_SERVERS = [
		'http://127.0.0.1:8000/api',
	];
	
	public const WORKBOOKVOICEOVERS_SERVERS = [
		'https://taam.ai/api',
	];
	
	public const ALLWORKBOOKS_SERVERS = [
		'https://taam.ai/api',
	];
	
	public const DELETEFOLDER_SERVERS = [
		'https://taam.ai/api',
	];
	
	public const PERMANENT_DELETEDOCUMENT_SERVERS = [
		'http://127.0.0.1:8000/api',
	];
	
	public const RESTOREFOLDER_SERVERS = [
		'https://taam.ai/api',
	];
	
	public const USERCHATS_SERVERS = [
		'https://taam.ai/api',
	];
	
	public const WORKBOOKCODES_SERVERS = [
		'https://taam.ai/api',
	];
	
	public const WORKBOOKIMAGES_SERVERS = [
		'https://taam.ai/api',
	];
	
	public const WORKBOOKPOLICIES_SERVERS = [
		'https://taam.ai/api',
	];
	
	public const WORKBOOKTRANSCRIPTS_SERVERS = [
		'https://taam.ai/api',
	];

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Add and remove from fav Document
     * 
     * @param \taamai\taamai\Models\Operations\AddandremovefromfavDocumentRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\AddandremovefromfavDocumentResponse
     */
	public function addandremovefromfavDocument(
        ?\taamai\taamai\Models\Operations\AddandremovefromfavDocumentRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\AddandremovefromfavDocumentResponse
    {
        $baseUrl = Utils\Utils::templateUrl(WorkbookAndFolders::ADDANDREMOVEFROMFAV_DOCUMENT_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/documents/add-to-fav');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\AddandremovefromfavDocumentRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\AddandremovefromfavDocumentResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addandremovefromfavDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\AddandremovefromfavDocumentAddandremovefromfavDocument', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Contents in work book
     * 
     * @param \taamai\taamai\Models\Operations\ContentsinworkbookRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\ContentsinworkbookResponse
     */
	public function contentsinworkbook(
        ?\taamai\taamai\Models\Operations\ContentsinworkbookRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\ContentsinworkbookResponse
    {
        $baseUrl = Utils\Utils::templateUrl(WorkbookAndFolders::CONTENTSINWORKBOOK_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/workbooks/contents');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\ContentsinworkbookRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\ContentsinworkbookResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contentsinworkbook = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Shared\Contentsinworkbook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create Folder
     * 
     * @param \taamai\taamai\Models\Operations\CreateFolderRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\CreateFolderResponse
     */
	public function createFolder(
        ?\taamai\taamai\Models\Operations\CreateFolderRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\CreateFolderResponse
    {
        $baseUrl = Utils\Utils::templateUrl(WorkbookAndFolders::CREATE_FOLDER_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/workbooks/create-folder');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\CreateFolderRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\CreateFolderResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createFolderlive = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\CreateFolderCreateFolderlive', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create Workbook
     * 
     * @param \taamai\taamai\Models\Operations\CreateWorkbookRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\CreateWorkbookResponse
     */
	public function createWorkbook(
        ?\taamai\taamai\Models\Operations\CreateWorkbookRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\CreateWorkbookResponse
    {
        $baseUrl = Utils\Utils::templateUrl(WorkbookAndFolders::CREATE_WORKBOOK_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/workbooks/create');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\CreateWorkbookRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\CreateWorkbookResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createWorkbooklivw = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\CreateWorkbookCreateWorkbooklivw', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete Workspace
     * 
     * @param \taamai\taamai\Models\Operations\DeleteWorkspaceRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\DeleteWorkspaceResponse
     */
	public function deleteWorkspace(
        ?\taamai\taamai\Models\Operations\DeleteWorkspaceRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\DeleteWorkspaceResponse
    {
        $baseUrl = Utils\Utils::templateUrl(WorkbookAndFolders::DELETE_WORKSPACE_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/workbooks/delete');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\DeleteWorkspaceRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\DeleteWorkspaceResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteWorkspacelive = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\DeleteWorkspaceDeleteWorkspacelive', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete all kind of documents
     * 
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\DeleteallkindofdocumentsResponse
     */
	public function deleteallkindofdocuments(
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\DeleteallkindofdocumentsResponse
    {
        $baseUrl = Utils\Utils::templateUrl(WorkbookAndFolders::DELETEALLKINDOFDOCUMENTS_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/documents/delete');
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\DeleteallkindofdocumentsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteallkindofdocuments = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\DeleteallkindofdocumentsDeleteallkindofdocuments', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Join workbook
     * 
     * @param \taamai\taamai\Models\Operations\JoinworkbookRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\JoinworkbookResponse
     */
	public function joinworkbook(
        ?\taamai\taamai\Models\Operations\JoinworkbookRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\JoinworkbookResponse
    {
        $baseUrl = Utils\Utils::templateUrl(WorkbookAndFolders::JOINWORKBOOK_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/workbooks/join-workbook');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\JoinworkbookRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\JoinworkbookResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->joinworkbook = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\JoinworkbookJoinworkbook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Join workbook requestr
     * 
     * @param \taamai\taamai\Models\Operations\JoinworkbookrequestrRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\JoinworkbookrequestrResponse
     */
	public function joinworkbookrequestr(
        ?\taamai\taamai\Models\Operations\JoinworkbookrequestrRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\JoinworkbookrequestrResponse
    {
        $baseUrl = Utils\Utils::templateUrl(WorkbookAndFolders::JOINWORKBOOKREQUESTR_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/worbooks/join-request');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\JoinworkbookrequestrRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\JoinworkbookrequestrResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->joinworkbookrequestr = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\JoinworkbookrequestrJoinworkbookrequestr', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Permanent Delete folder
     * 
     * @param \taamai\taamai\Models\Operations\PermanentDeletefolderRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\PermanentDeletefolderResponse
     */
	public function permanentDeletefolder(
        ?\taamai\taamai\Models\Operations\PermanentDeletefolderRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\PermanentDeletefolderResponse
    {
        $baseUrl = Utils\Utils::templateUrl(WorkbookAndFolders::PERMANENT_DELETEFOLDER_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/workbooks/folders/permanent-delete');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\PermanentDeletefolderRequest::class, $request, null));
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\PermanentDeletefolderResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Permanent Delete workspace
     * 
     * @return \taamai\taamai\Models\Operations\PermanentDeleteworkspaceResponse
     */
	public function permanentDeleteworkspace(
    ): \taamai\taamai\Models\Operations\PermanentDeleteworkspaceResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/');
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\PermanentDeleteworkspaceResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->permanentDeleteworkspacelive = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\PermanentDeleteworkspacePermanentDeleteworkspacelive', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reject Workbook
     * 
     * @param \taamai\taamai\Models\Operations\RejectWorkbookRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\RejectWorkbookResponse
     */
	public function rejectWorkbook(
        ?\taamai\taamai\Models\Operations\RejectWorkbookRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\RejectWorkbookResponse
    {
        $baseUrl = Utils\Utils::templateUrl(WorkbookAndFolders::REJECT_WORKBOOK_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/workbooks/reject-workbook');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\RejectWorkbookRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\RejectWorkbookResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rejectWorkbook = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\RejectWorkbookRejectWorkbook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Restore Docuemnt of all type  (content.voiceover,images,transcript,code)
     * 
     * @param \taamai\taamai\Models\Operations\RestoreDocuemntofalltypeContentVoiceoverImagesTranscriptCodeRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\RestoreDocuemntofalltypeContentVoiceoverImagesTranscriptCodeResponse
     */
	public function restoreDocuemntofalltypeContentVoiceoverImagesTranscriptCode(
        ?\taamai\taamai\Models\Operations\RestoreDocuemntofalltypeContentVoiceoverImagesTranscriptCodeRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\RestoreDocuemntofalltypeContentVoiceoverImagesTranscriptCodeResponse
    {
        $baseUrl = Utils\Utils::templateUrl(WorkbookAndFolders::RESTORE_DOCUEMNTOFALLTYPE_CONTENT_VOICEOVER_IMAGES_TRANSCRIPT_CODE_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/documents/restore');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\RestoreDocuemntofalltypeContentVoiceoverImagesTranscriptCodeRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\RestoreDocuemntofalltypeContentVoiceoverImagesTranscriptCodeResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restoreDocuemntofalltypecontentVoiceoverimagestranscriptcode = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\RestoreDocuemntofalltypeContentVoiceoverImagesTranscriptCodeRestoreDocuemntofalltypecontentVoiceoverimagestranscriptcode', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Restore Workspace
     * 
     * @param \taamai\taamai\Models\Operations\RestoreWorkspaceRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\RestoreWorkspaceResponse
     */
	public function restoreWorkspace(
        ?\taamai\taamai\Models\Operations\RestoreWorkspaceRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\RestoreWorkspaceResponse
    {
        $baseUrl = Utils\Utils::templateUrl(WorkbookAndFolders::RESTORE_WORKSPACE_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/workbooks/restore');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\RestoreWorkspaceRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\RestoreWorkspaceResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restoreWorkspacelive = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\RestoreWorkspaceRestoreWorkspacelive', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set defualt workspace
     * 
     * @param \taamai\taamai\Models\Operations\SetdefualtworkspaceRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\SetdefualtworkspaceResponse
     */
	public function setdefualtworkspace(
        ?\taamai\taamai\Models\Operations\SetdefualtworkspaceRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\SetdefualtworkspaceResponse
    {
        $baseUrl = Utils\Utils::templateUrl(WorkbookAndFolders::SETDEFUALTWORKSPACE_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/workbooks/set-default');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\SetdefualtworkspaceRequest::class, $request, null));
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\SetdefualtworkspaceResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Trashed folders
     * 
     * @param \taamai\taamai\Models\Operations\TrashedfoldersRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\TrashedfoldersResponse
     */
	public function trashedfolders(
        ?\taamai\taamai\Models\Operations\TrashedfoldersRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\TrashedfoldersResponse
    {
        $baseUrl = Utils\Utils::templateUrl(WorkbookAndFolders::TRASHEDFOLDERS_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/workbooks/trashed-folders');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\TrashedfoldersRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\TrashedfoldersResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trashedfolderslive = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\TrashedfoldersTrashedfolderslive', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Trashed workspaces
     * 
     * @param \taamai\taamai\Models\Operations\TrashedworkspacesRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\TrashedworkspacesResponse
     */
	public function trashedworkspaces(
        ?\taamai\taamai\Models\Operations\TrashedworkspacesRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\TrashedworkspacesResponse
    {
        $baseUrl = Utils\Utils::templateUrl(WorkbookAndFolders::TRASHEDWORKSPACES_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/workbooks/trashed');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\TrashedworkspacesRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\TrashedworkspacesResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trashedworkspaceslive = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\TrashedworkspacesTrashedworkspaceslive', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Workbook Detail
     * 
     * @param \taamai\taamai\Models\Operations\WorkbookDetailRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\WorkbookDetailResponse
     */
	public function workbookDetail(
        ?\taamai\taamai\Models\Operations\WorkbookDetailRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\WorkbookDetailResponse
    {
        $baseUrl = Utils\Utils::templateUrl(WorkbookAndFolders::WORKBOOK_DETAIL_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/workbooks/detail');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\WorkbookDetailRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\WorkbookDetailResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->workbookDetaillive = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\WorkbookDetailWorkbookDetaillive', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Workbook voiceovers
     * 
     * @param \taamai\taamai\Models\Operations\WorkbookvoiceoversRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\WorkbookvoiceoversResponse
     */
	public function workbookvoiceovers(
        ?\taamai\taamai\Models\Operations\WorkbookvoiceoversRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\WorkbookvoiceoversResponse
    {
        $baseUrl = Utils\Utils::templateUrl(WorkbookAndFolders::WORKBOOKVOICEOVERS_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/workbooks/voiceovers');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\WorkbookvoiceoversRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\WorkbookvoiceoversResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->workbookvoiceovers = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\WorkbookvoiceoversWorkbookvoiceovers', 'json');
            }
        }

        return $response;
    }
	
    /**
     * all workbooks
     * 
     * @param \taamai\taamai\Models\Operations\AllworkbooksRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\AllworkbooksResponse
     */
	public function allworkbooks(
        ?\taamai\taamai\Models\Operations\AllworkbooksRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\AllworkbooksResponse
    {
        $baseUrl = Utils\Utils::templateUrl(WorkbookAndFolders::ALLWORKBOOKS_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/workbooks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\AllworkbooksRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\AllworkbooksResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->allworkbookslive = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\AllworkbooksAllworkbookslive', 'json');
            }
        }

        return $response;
    }
	
    /**
     * delete folder
     * 
     * @param \taamai\taamai\Models\Operations\DeletefolderRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\DeletefolderResponse
     */
	public function deletefolder(
        ?\taamai\taamai\Models\Operations\DeletefolderRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\DeletefolderResponse
    {
        $baseUrl = Utils\Utils::templateUrl(WorkbookAndFolders::DELETEFOLDER_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/workbooks/folders/delete');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\DeletefolderRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\DeletefolderResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deletefolder = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\DeletefolderDeletefolder', 'json');
            }
        }

        return $response;
    }
	
    /**
     * permanent Delete document
     * 
     * @param \taamai\taamai\Models\Operations\PermanentDeletedocumentRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\PermanentDeletedocumentResponse
     */
	public function permanentDeletedocument(
        ?\taamai\taamai\Models\Operations\PermanentDeletedocumentRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\PermanentDeletedocumentResponse
    {
        $baseUrl = Utils\Utils::templateUrl(WorkbookAndFolders::PERMANENT_DELETEDOCUMENT_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/documents/permanent-delete');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\PermanentDeletedocumentRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\PermanentDeletedocumentResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->permanentDeletedocument = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\PermanentDeletedocumentPermanentDeletedocument', 'json');
            }
        }

        return $response;
    }
	
    /**
     * restore folder
     * 
     * @param \taamai\taamai\Models\Operations\RestorefolderRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\RestorefolderResponse
     */
	public function restorefolder(
        ?\taamai\taamai\Models\Operations\RestorefolderRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\RestorefolderResponse
    {
        $baseUrl = Utils\Utils::templateUrl(WorkbookAndFolders::RESTOREFOLDER_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/workbooks/folders/restore');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\RestorefolderRequest::class, $request, null));
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\RestorefolderResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * user chats
     * 
     * @param \taamai\taamai\Models\Operations\UserchatsRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\UserchatsResponse
     */
	public function userchats(
        ?\taamai\taamai\Models\Operations\UserchatsRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\UserchatsResponse
    {
        $baseUrl = Utils\Utils::templateUrl(WorkbookAndFolders::USERCHATS_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/workbooks/chats');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\UserchatsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\UserchatsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userchats = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\UserchatsUserchats', 'json');
            }
        }

        return $response;
    }
	
    /**
     * workbook codes
     * 
     * @param \taamai\taamai\Models\Operations\WorkbookcodesRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\WorkbookcodesResponse
     */
	public function workbookcodes(
        ?\taamai\taamai\Models\Operations\WorkbookcodesRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\WorkbookcodesResponse
    {
        $baseUrl = Utils\Utils::templateUrl(WorkbookAndFolders::WORKBOOKCODES_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/workbooks/codes');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\WorkbookcodesRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\WorkbookcodesResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->newRequest = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\WorkbookcodesNewRequest', 'json');
            }
        }

        return $response;
    }
	
    /**
     * workbook images
     * 
     * @param \taamai\taamai\Models\Operations\WorkbookimagesRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\WorkbookimagesResponse
     */
	public function workbookimages(
        ?\taamai\taamai\Models\Operations\WorkbookimagesRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\WorkbookimagesResponse
    {
        $baseUrl = Utils\Utils::templateUrl(WorkbookAndFolders::WORKBOOKIMAGES_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/workbooks/images');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\WorkbookimagesRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\WorkbookimagesResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->workbookimages = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\WorkbookimagesWorkbookimages', 'json');
            }
        }

        return $response;
    }
	
    /**
     * workbook policies
     * 
     * @param \taamai\taamai\Models\Operations\WorkbookpoliciesRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\WorkbookpoliciesResponse
     */
	public function workbookpolicies(
        ?\taamai\taamai\Models\Operations\WorkbookpoliciesRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\WorkbookpoliciesResponse
    {
        $baseUrl = Utils\Utils::templateUrl(WorkbookAndFolders::WORKBOOKPOLICIES_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/workbooks/policies');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\WorkbookpoliciesRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\WorkbookpoliciesResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->workbookpolicies = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\WorkbookpoliciesWorkbookpolicies', 'json');
            }
        }

        return $response;
    }
	
    /**
     * workbook transcripts
     * 
     * @param \taamai\taamai\Models\Operations\WorkbooktranscriptsRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\WorkbooktranscriptsResponse
     */
	public function workbooktranscripts(
        ?\taamai\taamai\Models\Operations\WorkbooktranscriptsRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\WorkbooktranscriptsResponse
    {
        $baseUrl = Utils\Utils::templateUrl(WorkbookAndFolders::WORKBOOKTRANSCRIPTS_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/workbooks/transcripts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\WorkbooktranscriptsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\WorkbooktranscriptsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->workbooktranscripts = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\WorkbooktranscriptsWorkbooktranscripts', 'json');
            }
        }

        return $response;
    }
}