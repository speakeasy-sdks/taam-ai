<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace taamai\taamai;

class Product 
{
	
	public const CREATE_PRODUCT_SERVERS = [
		'http://127.0.0.1:8000/api',
	];
	
	public const DELETE_PRODUCT_SERVERS = [
		'http://127.0.0.1:8000/api',
	];
	
	public const RESTORE_PRODUCT_SERVERS = [
		'http://127.0.0.1:8000/api',
	];
	
	public const TRASHED_PRODUCTS_SERVERS = [
		'http://127.0.0.1:8000/api',
	];
	
	public const UPDATE_PRODUCT_SERVERS = [
		'http://127.0.0.1:8000/api',
	];
	
	public const USER_PRODUCTD_SERVERS = [
		'http://127.0.0.1:8000/api',
	];
	
	public const PARMENENTDELETE_PRODUCT_SERVERS = [
		'http://127.0.0.1:8000/api',
	];

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Create Product
     * 
     * @param \taamai\taamai\Models\Operations\CreateProductRequestBody $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\CreateProductResponse
     */
	public function createProduct(
        ?\taamai\taamai\Models\Operations\CreateProductRequestBody $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\CreateProductResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Product::CREATE_PRODUCT_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/products/create');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\CreateProductResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createProduct = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\CreateProductCreateProduct', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete Product
     * 
     * @param \taamai\taamai\Models\Operations\DeleteProductRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\DeleteProductResponse
     */
	public function deleteProduct(
        ?\taamai\taamai\Models\Operations\DeleteProductRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\DeleteProductResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Product::DELETE_PRODUCT_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/products/delete');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\DeleteProductRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\DeleteProductResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteProduct = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\DeleteProductDeleteProduct', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Restore Product
     * 
     * @param \taamai\taamai\Models\Operations\RestoreProductRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\RestoreProductResponse
     */
	public function restoreProduct(
        ?\taamai\taamai\Models\Operations\RestoreProductRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\RestoreProductResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Product::RESTORE_PRODUCT_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/products/restore');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\RestoreProductRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\RestoreProductResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restoreProduct = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\RestoreProductRestoreProduct', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Trashed Products
     * 
     * @param \taamai\taamai\Models\Operations\TrashedProductsRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\TrashedProductsResponse
     */
	public function trashedProducts(
        ?\taamai\taamai\Models\Operations\TrashedProductsRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\TrashedProductsResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Product::TRASHED_PRODUCTS_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/products/trashed');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\TrashedProductsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\TrashedProductsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trashedProducts = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\TrashedProductsTrashedProducts', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Product
     * 
     * @param \taamai\taamai\Models\Operations\UpdateProductRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\UpdateProductResponse
     */
	public function updateProduct(
        ?\taamai\taamai\Models\Operations\UpdateProductRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\UpdateProductResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Product::UPDATE_PRODUCT_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/products/update');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\UpdateProductRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\UpdateProductResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateProduct = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\UpdateProductUpdateProduct', 'json');
            }
        }

        return $response;
    }
	
    /**
     * User Productd
     * 
     * @param \taamai\taamai\Models\Operations\UserProductdRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\UserProductdResponse
     */
	public function userProductd(
        ?\taamai\taamai\Models\Operations\UserProductdRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\UserProductdResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Product::USER_PRODUCTD_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/products');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\UserProductdRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\UserProductdResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userProductd = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\UserProductdUserProductd', 'json');
            }
        }

        return $response;
    }
	
    /**
     * parmenent delete Product
     * 
     * @param \taamai\taamai\Models\Operations\ParmenentdeleteProductRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\ParmenentdeleteProductResponse
     */
	public function parmenentdeleteProduct(
        ?\taamai\taamai\Models\Operations\ParmenentdeleteProductRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\ParmenentdeleteProductResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Product::PARMENENTDELETE_PRODUCT_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/products/permanent-delete');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\ParmenentdeleteProductRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \taamai\taamai\Models\Operations\ParmenentdeleteProductResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->newRequest1 = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\ParmenentdeleteProductNewRequest1', 'json');
            }
        }

        return $response;
    }
}