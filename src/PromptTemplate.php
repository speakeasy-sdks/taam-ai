<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace taamai\taamai;

class PromptTemplate 
{
	
	public const ADDANDREMOVEFROMBOOKMARKPROMPTTEMPLATE_SERVERS = [
		'http://127.0.0.1:8000/api',
	];
	
	public const CREATE_PROMPT_TEMPLATE_SERVERS = [
		'http://127.0.0.1:8000/api',
	];
	
	public const GENERATEPROMPTTEMPLATE_SERVERS = [
		'http://127.0.0.1:8000/api',
	];
	
	public const PARMANENT_DELETE_PROMPTTEMPLATE_SERVERS = [
		'http://127.0.0.1:8000/api',
	];
	
	public const PROMPT_TEMPLATES_SERVERS = [
		'http://127.0.0.1:8000/api',
	];
	
	public const RESTORE_PROMPT_TEMPLATE_SERVERS = [
		'http://127.0.0.1:8000/api',
	];
	
	public const TRASHED_PROMPT_TEMPLATES_SERVERS = [
		'http://127.0.0.1:8000/api',
	];
	
	public const DELETEPRMOPTTEMPLATE_SERVERS = [
		'http://127.0.0.1:8000/api',
	];
	
	public const PROMPTTEMPLATELIKEORREMOVEFROMLIKE_SERVERS = [
		'http://127.0.0.1:8000/api',
	];

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Add and remove from bookmark prompt template
     * 
     * @param \taamai\taamai\Models\Operations\AddandremovefrombookmarkprompttemplateRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\AddandremovefrombookmarkprompttemplateResponse
     */
	public function addandremovefrombookmarkprompttemplate(
        ?\taamai\taamai\Models\Operations\AddandremovefrombookmarkprompttemplateRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\AddandremovefrombookmarkprompttemplateResponse
    {
        $baseUrl = Utils\Utils::templateUrl(PromptTemplate::ADDANDREMOVEFROMBOOKMARKPROMPTTEMPLATE_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/prompt-template/add-bookmark');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\AddandremovefrombookmarkprompttemplateRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \taamai\taamai\Models\Operations\AddandremovefrombookmarkprompttemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->newRequest1 = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\AddandremovefrombookmarkprompttemplateNewRequest1', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create Prompt Template
     * 
     * @param \taamai\taamai\Models\Operations\CreatePromptTemplateRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\CreatePromptTemplateResponse
     */
	public function createPromptTemplate(
        ?\taamai\taamai\Models\Operations\CreatePromptTemplateRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\CreatePromptTemplateResponse
    {
        $baseUrl = Utils\Utils::templateUrl(PromptTemplate::CREATE_PROMPT_TEMPLATE_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/prompt-template/create');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\CreatePromptTemplateRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \taamai\taamai\Models\Operations\CreatePromptTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createPromptTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\CreatePromptTemplateCreatePromptTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generate prompt template
     * 
     * @param \taamai\taamai\Models\Operations\GenerateprompttemplateRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\GenerateprompttemplateResponse
     */
	public function generateprompttemplate(
        ?\taamai\taamai\Models\Operations\GenerateprompttemplateRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\GenerateprompttemplateResponse
    {
        $baseUrl = Utils\Utils::templateUrl(PromptTemplate::GENERATEPROMPTTEMPLATE_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/templates/prompt-generate');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\GenerateprompttemplateRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \taamai\taamai\Models\Operations\GenerateprompttemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->generateprompttemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\GenerateprompttemplateGenerateprompttemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Parmanent Delete Prompt template
     * 
     * @param \taamai\taamai\Models\Operations\ParmanentDeletePrompttemplateRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\ParmanentDeletePrompttemplateResponse
     */
	public function parmanentDeletePrompttemplate(
        ?\taamai\taamai\Models\Operations\ParmanentDeletePrompttemplateRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\ParmanentDeletePrompttemplateResponse
    {
        $baseUrl = Utils\Utils::templateUrl(PromptTemplate::PARMANENT_DELETE_PROMPTTEMPLATE_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/prompt-templates/permanent-delete');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\ParmanentDeletePrompttemplateRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \taamai\taamai\Models\Operations\ParmanentDeletePrompttemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->parmanentDeletePrompttemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\ParmanentDeletePrompttemplateParmanentDeletePrompttemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Prompt Templates
     * 
     * @param \taamai\taamai\Models\Operations\PromptTemplatesRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\PromptTemplatesResponse
     */
	public function promptTemplates(
        ?\taamai\taamai\Models\Operations\PromptTemplatesRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\PromptTemplatesResponse
    {
        $baseUrl = Utils\Utils::templateUrl(PromptTemplate::PROMPT_TEMPLATES_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/prompt-templates');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\PromptTemplatesRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \taamai\taamai\Models\Operations\PromptTemplatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->promptTemplates = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\PromptTemplatesPromptTemplates', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Restore Prompt Template
     * 
     * @param \taamai\taamai\Models\Operations\RestorePromptTemplateRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\RestorePromptTemplateResponse
     */
	public function restorePromptTemplate(
        ?\taamai\taamai\Models\Operations\RestorePromptTemplateRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\RestorePromptTemplateResponse
    {
        $baseUrl = Utils\Utils::templateUrl(PromptTemplate::RESTORE_PROMPT_TEMPLATE_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/prompt-templates/restore');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\RestorePromptTemplateRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \taamai\taamai\Models\Operations\RestorePromptTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restorePromptTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\RestorePromptTemplateRestorePromptTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Trashed Prompt Templates
     * 
     * @param \taamai\taamai\Models\Operations\TrashedPromptTemplatesRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\TrashedPromptTemplatesResponse
     */
	public function trashedPromptTemplates(
        ?\taamai\taamai\Models\Operations\TrashedPromptTemplatesRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\TrashedPromptTemplatesResponse
    {
        $baseUrl = Utils\Utils::templateUrl(PromptTemplate::TRASHED_PROMPT_TEMPLATES_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/prompt-templates/trashed');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\TrashedPromptTemplatesRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \taamai\taamai\Models\Operations\TrashedPromptTemplatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trashedPromptTemplates = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\TrashedPromptTemplatesTrashedPromptTemplates', 'json');
            }
        }

        return $response;
    }
	
    /**
     * delete prmopt template
     * 
     * @param \taamai\taamai\Models\Operations\DeleteprmopttemplateRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\DeleteprmopttemplateResponse
     */
	public function deleteprmopttemplate(
        ?\taamai\taamai\Models\Operations\DeleteprmopttemplateRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\DeleteprmopttemplateResponse
    {
        $baseUrl = Utils\Utils::templateUrl(PromptTemplate::DELETEPRMOPTTEMPLATE_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/prompt-templates/delete');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\DeleteprmopttemplateRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \taamai\taamai\Models\Operations\DeleteprmopttemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteprmopttemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\DeleteprmopttemplateDeleteprmopttemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * prompt template like or remove from like
     * 
     * @param \taamai\taamai\Models\Operations\PrompttemplatelikeorremovefromlikeRequest $request
     * @param string $serverURL
     * @return \taamai\taamai\Models\Operations\PrompttemplatelikeorremovefromlikeResponse
     */
	public function prompttemplatelikeorremovefromlike(
        ?\taamai\taamai\Models\Operations\PrompttemplatelikeorremovefromlikeRequest $request,
        ?string $serverURL = null,
    ): \taamai\taamai\Models\Operations\PrompttemplatelikeorremovefromlikeResponse
    {
        $baseUrl = Utils\Utils::templateUrl(PromptTemplate::PROMPTTEMPLATELIKEORREMOVEFROMLIKE_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/prompt-template/add-like');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\taamai\taamai\Models\Operations\PrompttemplatelikeorremovefromlikeRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \taamai\taamai\Models\Operations\PrompttemplatelikeorremovefromlikeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->prompttemplatelikeorremovefromlike = $serializer->deserialize((string)$httpResponse->getBody(), 'taamai\taamai\Models\Operations\PrompttemplatelikeorremovefromlikePrompttemplatelikeorremovefromlike', 'json');
            }
        }

        return $response;
    }
}